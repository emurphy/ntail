#!/usr/bin/env ruby

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'optparse'
require 'methadone'

begin
  require 'ntail'
rescue LoadError
  require 'rubygems'
  require 'ntail'
end

class App

  include Methadone::Main
  include Methadone::CLILogging

  main do |*files|

    pattern = Regexp.new(options[:pattern] || '.*')

    files_read = lines_read = 0
    parsable_lines = unparsable_lines = 0
    lines_processed = lines_filtered = 0

    files.each do |file|
      info "now processing: #{file}"
      files_read += 1 ; line_number = 0
      open(file, "r") do |file|
        while line = file.gets
          lines_read += 1 ; line_number += 1
          log_line = Ntail::LogLine.new(line.chomp, pattern, file.path, line_number)
          debug log_line.to_s(:debug)
          if log_line.parsable?
            parsable_lines += 1
            if !options[:filter] || log_line.instance_eval(options[:filter])
              lines_processed += 1
            else
              lines_filtered += 1
            end
          else
            unparsable_lines += 1
          end
        end
      end
    end

    info "processed #{lines_read} line(s) in #{files_read} file(s)"
    info "#{parsable_lines} parsable lines, #{unparsable_lines} unparsable lines"
    info "processed #{lines_processed} lines, filtered out #{lines_filtered} lines"

  end

  # supplemental methods here

  # Declare command-line interface here

  # description "one line description of your app"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #

  on('--pattern REGEXP', 'The regular expression each line is matched against')
  on('--filter BLOCK', 'The filter that will be applied to each line (boolean Ruby code block)')

  arg :file, :any, "List of files to process"

  version Ntail::VERSION

  use_log_level_option

  go!

end

# That's all, Folks!
